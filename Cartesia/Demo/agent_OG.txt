from __future__ import annotations

import asyncio
import logging
from dotenv import load_dotenv
import json
import os
import sys
import locale
from typing import Any
import uuid
from dataclasses import dataclass
import random

# Forcer l'encodage UTF-8 pour Windows
if sys.platform == 'win32':
    # Tentative de définir le locale en français UTF-8
    try:
        locale.setlocale(locale.LC_ALL, 'fr_FR.UTF-8')
    except locale.Error:
        try:
            locale.setlocale(locale.LC_ALL, 'French_France.1252')
        except locale.Error:
            pass

# Configuration du logger pour gérer les accents
logger = logging.getLogger("outbound-caller")
logger.setLevel(logging.INFO)

# Créer un gestionnaire de flux qui gère l'encodage UTF-8 sans utiliser buffer
handler = logging.StreamHandler(sys.stderr)
handler.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# Logs au démarrage du script pour débogage
logger.info(f"Agent script démarre, args: {sys.argv}")
logger.info(f"Python version: {sys.version}")
logger.info(f"Répertoire courant: {os.getcwd()}")
logger.info(f"Encodage par défaut: {sys.getdefaultencoding()}")
logger.info(f"Locale système: {locale.getlocale()}")

# Charger le fichier .env spécifié par la variable d'environnement ou .env.local par défaut
dotenv_file = os.getenv("DOTENV_FILE", ".env.local")
logger.info(f"Chargement du fichier .env: {dotenv_file}")
load_dotenv(dotenv_path=dotenv_file, encoding='utf-8')

outbound_trunk_id = os.getenv("SIP_OUTBOUND_TRUNK_ID")
patient_name = os.getenv("PATIENT_NAME", "Jayden")
appointment_time = os.getenv("APPOINTMENT_TIME", "next Tuesday at 3pm")
room_name = os.getenv("LK_ROOM_NAME", "")
job_metadata = os.getenv("LK_JOB_METADATA", "{}")

# Ajout de logs pour débugger
logger.info(f"SIP_OUTBOUND_TRUNK_ID: {outbound_trunk_id}")
logger.info(f"PATIENT_NAME: {patient_name}")
logger.info(f"APPOINTMENT_TIME: {appointment_time}")
logger.info(f"LK_ROOM_NAME: {room_name}")
logger.info(f"LK_JOB_METADATA: {job_metadata}")
logger.info(f"LIVEKIT_URL: {os.getenv('LIVEKIT_URL', 'non défini')}")
logger.info(f"LIVEKIT_API_KEY présent: {'Oui' if os.getenv('LIVEKIT_API_KEY') else 'Non'}")

# Importer les modules après la configuration du logger
from livekit import rtc, api
from livekit.agents import (
    AgentSession,
    Agent,
    JobContext,
    function_tool,
    RunContext,
    get_job_context,
    cli,
    RoomInputOptions,
    WorkerOptions,
)
from livekit.plugins import (
    deepgram,
    openai,
    cartesia,
    silero,
)

class OutboundCaller(Agent):
    def __init__(
        self,
        *,
        name: str,
        appointment_time: str,
        dial_info: dict[str, Any],
    ):
        super().__init__(
            instructions=f"""
            You are a scheduling assistant for a dental practice. Your interface with user will be voice.
            You will be on a call with a patient who has an upcoming appointment. Your goal is to confirm the appointment details.
            As a customer service representative, you will be polite and professional at all times. Allow user to end the conversation.

            When the user would like to be transferred to a human agent, first confirm with them. upon confirmation, use the transfer_call tool.
            The customer's name is {name}. His appointment is on {appointment_time}.
            """
        )
        # keep reference to the participant for transfers
        self.participant: rtc.RemoteParticipant | None = None

        self.dial_info = dial_info
        
        # Ajout de logs pour débugger
        logger.info(f"OutboundCaller initialisé avec name: {name}, appointment: {appointment_time}")
        logger.info(f"dial_info: {dial_info}")

    def set_participant(self, participant: rtc.RemoteParticipant):
        self.participant = participant

    async def hangup(self):
        """Helper function to hang up the call by deleting the room"""

        job_ctx = get_job_context()
        await job_ctx.api.room.delete_room(
            api.DeleteRoomRequest(
                room=job_ctx.room.name,
            )
        )

    @function_tool()
    async def transfer_call(self, ctx: RunContext):
        """Transfer the call to a human agent, called after confirming with the user"""

        transfer_to = self.dial_info["transfer_to"]
        if not transfer_to:
            return "cannot transfer call"

        logger.info(f"transferring call to {transfer_to}")

        # let the message play fully before transferring
        await ctx.session.generate_reply(
            instructions="let the user know you'll be transferring them"
        )

        job_ctx = get_job_context()
        try:
            await job_ctx.api.sip.transfer_sip_participant(
                api.TransferSIPParticipantRequest(
                    room_name=job_ctx.room.name,
                    participant_identity=self.participant.identity,
                    transfer_to=f"tel:{transfer_to}",
                )
            )

            logger.info(f"transferred call to {transfer_to}")
        except Exception as e:
            logger.error(f"error transferring call: {e}")
            await ctx.session.generate_reply(
                instructions="there was an error transferring the call."
            )
            await self.hangup()

    @function_tool()
    async def end_call(self, ctx: RunContext):
        """Called when the user wants to end the call"""
        logger.info(f"ending the call for {self.participant.identity}")

        # let the agent finish speaking
        current_speech = ctx.session.current_speech
        if current_speech:
            await current_speech.done()

        await self.hangup()

    @function_tool()
    async def look_up_availability(
        self,
        ctx: RunContext,
        date: str,
    ):
        """Called when the user asks about alternative appointment availability

        Args:
            date: The date of the appointment to check availability for
        """
        logger.info(
            f"looking up availability for {self.participant.identity} on {date}"
        )
        await asyncio.sleep(3)
        return {
            "available_times": ["1pm", "2pm", "3pm"],
        }

    @function_tool()
    async def confirm_appointment(
        self,
        ctx: RunContext,
        date: str,
        time: str,
    ):
        """Called when the user confirms their appointment on a specific date.
        Use this tool only when they are certain about the date and time.

        Args:
            date: The date of the appointment
            time: The time of the appointment
        """
        logger.info(
            f"confirming appointment for {self.participant.identity} on {date} at {time}"
        )
        return "reservation confirmed"

    @function_tool()
    async def detected_answering_machine(self, ctx: RunContext):
        """Called when the call reaches voicemail. Use this tool AFTER you hear the voicemail greeting"""
        logger.info(f"detected answering machine for {self.participant.identity}")
        await self.hangup()


async def entrypoint(ctx: JobContext):
    global outbound_trunk_id, patient_name, appointment_time
    logger.info(f"Entrée dans la fonction entrypoint")
    logger.info(f"Connexion à la room {ctx.room.name}")
    await ctx.connect()

    logger.info(f"Connexion établie à la room")
    
    # Ajout de logs pour débugger
    logger.info(f"Métadonnées du job: {ctx.job.metadata}")
    
    # when dispatching the agent, we'll pass it the approriate info to dial the user
    # dial_info is a dict with the following keys:
    # - phone_number: the phone number to dial
    # - transfer_to: the phone number to transfer the call to when requested
    try:
        dial_info = json.loads(ctx.job.metadata)
        logger.info(f"dial_info parsed: {dial_info}")
    except json.JSONDecodeError as e:
        logger.error(f"Erreur lors du décodage des métadonnées JSON: {e}")
        logger.error(f"Contenu brut des métadonnées: {ctx.job.metadata}")
        # Si les métadonnées sont invalides, essayer d'utiliser celles de l'environnement
        try:
            dial_info = json.loads(job_metadata)
            logger.info(f"dial_info chargé depuis l'environnement: {dial_info}")
        except json.JSONDecodeError:
            logger.error(f"Impossible de charger les métadonnées depuis l'environnement")
            dial_info = {}
    
    if not "phone_number" in dial_info:
        logger.error("Le numéro de téléphone est manquant dans le dial_info")
        # S'il manque le numéro de téléphone, vérifier s'il est présent dans l'environnement
        phone_from_env = os.getenv("PHONE_NUMBER")
        if phone_from_env:
            logger.info(f"Numéro de téléphone trouvé dans l'environnement: {phone_from_env}")
            dial_info["phone_number"] = phone_from_env
        else:
            logger.error("Impossible de trouver un numéro de téléphone valide")
            ctx.shutdown()
            return

    # look up the user's phone number and appointment details
    logger.info(f"Création de l'agent OutboundCaller")
    agent = OutboundCaller(
        name=patient_name,
        appointment_time=appointment_time,
        dial_info=dial_info,
    )

    # the following uses GPT-4o, Deepgram and Cartesia
    logger.info(f"Création de l'AgentSession")
    session = AgentSession(
        vad=silero.VAD.load(),
        stt=deepgram.STT(language="fr", model="nova-2"),
        # you can also use OpenAI's TTS with openai.TTS()
        tts=cartesia.TTS(model="sonic-2",
            voice="65b25c5d-ff07-4687-a04c-da2f43ef6fa9"),
        llm=openai.LLM(model="gpt-4o-mini"),
        # you can also use a speech-to-speech model like OpenAI's Realtime API
        # llm=openai.realtime.RealtimeModel()
    )

    # start the session first before dialing, to ensure that when the user picks up
    # the agent does not miss anything the user says
    # creating a task for this because session.start does not return until the participant is available
    logger.info(f"Démarrage de la session")
    asyncio.create_task(
        session.start(
            agent=agent,
            room=ctx.room,
            room_input_options=RoomInputOptions(),
        )
    )

    # Ajout de logs pour débugger
    logger.info(f"Tentative d'appel au numéro {dial_info['phone_number']} via trunk {outbound_trunk_id}")
    
    # `create_sip_participant` starts dialing the user
    try:
        logger.info(f"Appel de create_sip_participant")
        
        # Vérifier si le trunk ID est défini
        if not outbound_trunk_id:
            outbound_trunk_id = os.getenv("SIP_OUTBOUND_TRUNK_ID")
            if not outbound_trunk_id:
                logger.error("SIP_OUTBOUND_TRUNK_ID n'est pas défini dans l'environnement")
                ctx.shutdown()
                return
                
        logger.info(f"Utilisation du trunk ID: {outbound_trunk_id}")
        
        # Créer le participant SIP et commencer l'appel
        await ctx.api.sip.create_sip_participant(
            api.CreateSIPParticipantRequest(
                room_name=ctx.room.name,
                sip_trunk_id=outbound_trunk_id,
                sip_call_to=dial_info["phone_number"],
                participant_identity="phone_user",
                # function blocks until user answers the call, or if the call fails
                wait_until_answered=True,
            )
        )

        logger.info(f"Appel établi, attente du participant")
        # a participant phone user is now available
        participant = await ctx.wait_for_participant(identity="phone_user")
        logger.info(f"Participant connecté: {participant.identity}")
        agent.set_participant(participant)

    except api.TwirpError as e:
        logger.error(
            f"error creating SIP participant: {e.message}, "
            f"SIP status: {e.metadata.get('sip_status_code')} "
            f"{e.metadata.get('sip_status')}"
        )
        ctx.shutdown()
    except Exception as e:
        logger.error(f"Erreur inattendue lors de l'appel: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        ctx.shutdown()


if __name__ == "__main__":
    logger.info("Démarrage de l'application")
    try:
        worker_options = WorkerOptions(
            entrypoint_fnc=entrypoint,
            agent_name="outbound-caller",
        )
        logger.info(f"Options de worker configurées: {worker_options.agent_name}")
        
        # Utiliser run_app, qui est la méthode standard pour lancer un agent LiveKit
        # Cela gère automatiquement le démarrage de l'agent et les événements
        logger.info("Lancement de l'application avec CLI standard")
        cli.run_app(worker_options)
    except Exception as e:
        logger.error(f"Erreur lors du démarrage de l'application: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
