import{e as i}from"./chunk-6LFTWSE2.js";import{program as n}from"commander";var{CLIENT_ID:a,CLIENT_SECRET:s,PROJECT_ID:p,API_HOST:d,ENVIRONMENT:l}=process.env;(!a||!s||!p)&&(console.error("Error: Missing required environment variables (CLIENT_ID, CLIENT_SECRET, PROJECT_ID)."),process.exit(1));var t=i({credentials:{clientId:a,clientSecret:s},projectId:p,apiHost:d,environment:l==="production"?"production":"development"});n.name("connect-cli").description("CLI for interacting with the Pipedream Connect API").version("1.0.0");var r=(o,e)=>{o instanceof Error?console.error(`${e}:`,o.message):console.error(`${e}:`,String(o))};n.command("list-project-info").description("List information about the project, including linked apps.").action(async()=>{try{let o=await t.getProjectInfo();console.log(JSON.stringify(o,null,2))}catch(o){r(o,"Failed to fetch project info")}});n.command("delete-account <accountId>").description("Delete an account by its ID.").action(async o=>{try{await t.deleteAccount(o),console.log(`Account with ID ${o} has been deleted.`)}catch(e){r(e,"Failed to delete account")}});n.command("delete-accounts-by-app <appId>").description("Delete all accounts associated with a specific app.").action(async o=>{try{await t.deleteAccountsByApp(o),console.log(`All accounts associated with app ID ${o} have been deleted.`)}catch(e){r(e,"Failed to delete accounts by app")}});n.command("delete-external-user <externalId>").description("Delete all accounts associated with a specific external ID.").action(async o=>{try{await t.deleteExternalUser(o),console.log(`All accounts associated with external ID ${o} have been deleted.`)}catch(e){r(e,"Failed to delete external user")}});n.command("create-connect-token <externalUserId>").description("Create a new Pipedream Connect token.").option("--success-redirect-uri <uri>","URL to redirect the user to upon successful connection").option("--error-redirect-uri <uri>","URL to redirect the user to upon failed connection").option("--webhook-uri <uri>","Webhook URI that Pipedream can invoke on success or failure of connection requests").option("--allowed-origins <origins>","Comma-separated list of allowed origins").action(async(o,e)=>{try{let c=await t.createConnectToken({external_user_id:o,success_redirect_uri:e.successRedirectUri,error_redirect_uri:e.errorRedirectUri,webhook_uri:e.webhookUri,allowed_origins:e.allowedOrigins?e.allowedOrigins.split(","):void 0});console.log(JSON.stringify(c,null,2))}catch(c){r(c,"Failed to create connect token")}});n.command("get-accounts").description("Retrieve the list of accounts associated with the project.").option("--include-credentials <include>","Include credentials in the response").action(async o=>{try{let e=o.includeCredentials?{include_credentials:o.includeCredentials}:{},c=await t.getAccounts(e);console.log(JSON.stringify(c,null,2))}catch(e){r(e,"Failed to fetch accounts")}});n.command("get-account-by-id <accountId>").description("Retrieve a specific account by ID.").action(async o=>{try{let e=await t.getAccountById(o);console.log(JSON.stringify(e,null,2))}catch(e){r(e,"Failed to fetch account by ID")}});n.command("list-apps").description("Retrieve the list of apps.").option("--query <query>","Query string to filter apps").action(async o=>{try{let e=await t.apps({q:o.query});console.log(JSON.stringify(e,null,2))}catch(e){r(e,"Failed to fetch apps")}});n.command("get-app <idOrNameSlug>").description("Retrieve a specific app by ID or name slug.").action(async o=>{try{let e=await t.app(o);console.log(JSON.stringify(e,null,2))}catch(e){r(e,"Failed to fetch app")}});n.command("list-components").description("Retrieve the list of components.").option("--app <app>","Filter components by app").option("--query <query>","Query string to filter components").option("--component-type <type>","Filter components by type (trigger or action)").action(async o=>{try{let e=await t.components({app:o.app,q:o.query,componentType:o.componentType});console.log(JSON.stringify(e,null,2))}catch(e){r(e,"Failed to fetch components")}});n.command("get-component <key>").description("Retrieve a specific component by key.").action(async o=>{try{let e=await t.component({key:o});console.log(JSON.stringify(e,null,2))}catch(e){r(e,"Failed to fetch component")}});n.command("configure-component").description("Configure a component.").requiredOption("--user-id <userId>","User ID").requiredOption("--component-id <componentId>","Component ID").requiredOption("--prop-name <propName>","Property name").requiredOption("--configured-props <props>","Configured properties as JSON string").option("--dynamic-props-id <id>","Dynamic properties ID").action(async o=>{try{let e=JSON.parse(o.configuredProps),c=await t.componentConfigure({userId:o.userId,componentId:o.componentId,propName:o.propName,configuredProps:e,dynamicPropsId:o.dynamicPropsId});console.log(JSON.stringify(c,null,2))}catch(e){r(e,"Failed to configure component")}});n.command("reload-component-props").description("Reload component properties.").requiredOption("--user-id <userId>","User ID").requiredOption("--component-id <componentId>","Component ID").requiredOption("--configured-props <props>","Configured properties as JSON string").option("--dynamic-props-id <id>","Dynamic properties ID").action(async o=>{try{let e=JSON.parse(o.configuredProps),c=await t.componentReloadProps({userId:o.userId,componentId:o.componentId,configuredProps:e,dynamicPropsId:o.dynamicPropsId});console.log(JSON.stringify(c,null,2))}catch(e){r(e,"Failed to reload component properties")}});n.command("run-action").description("Run an action.").requiredOption("--user-id <userId>","User ID").requiredOption("--action-id <actionId>","Action ID").requiredOption("--configured-props <props>","Configured properties as JSON string").option("--dynamic-props-id <id>","Dynamic properties ID").action(async o=>{try{let e=JSON.parse(o.configuredProps),c=await t.actionRun({userId:o.userId,actionId:o.actionId,configuredProps:e,dynamicPropsId:o.dynamicPropsId});console.log(JSON.stringify(c,null,2))}catch(e){r(e,"Failed to run action")}});n.parse(process.argv);
//# sourceMappingURL=cli.js.map