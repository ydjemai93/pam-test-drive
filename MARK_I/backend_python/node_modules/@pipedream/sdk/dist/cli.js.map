{"version":3,"sources":["../src/server/cli.ts"],"sourcesContent":["import { createBackendClient } from \"./index.js\";\nimport { program } from \"commander\";\n\nconst {\n  CLIENT_ID, CLIENT_SECRET, PROJECT_ID, API_HOST, ENVIRONMENT,\n} = process.env;\n\nif (!CLIENT_ID || !CLIENT_SECRET || !PROJECT_ID) {\n  console.error(\"Error: Missing required environment variables (CLIENT_ID, CLIENT_SECRET, PROJECT_ID).\");\n  process.exit(1);\n}\n\nconst client = createBackendClient({\n  credentials: {\n    clientId: CLIENT_ID,\n    clientSecret: CLIENT_SECRET,\n  },\n  projectId: PROJECT_ID,\n  apiHost: API_HOST,\n  environment: ENVIRONMENT === \"production\"\n    ? \"production\"\n    : \"development\",\n});\n\nprogram\n  .name(\"connect-cli\")\n  .description(\"CLI for interacting with the Pipedream Connect API\")\n  .version(\"1.0.0\");\n\nconst handleError = (error: unknown, message: string) => {\n  if (error instanceof Error) {\n    console.error(`${message}:`, error.message);\n  } else {\n    console.error(`${message}:`, String(error));\n  }\n};\n\nprogram\n  .command(\"list-project-info\")\n  .description(\"List information about the project, including linked apps.\")\n  .action(async () => {\n    try {\n      const projectInfo = await client.getProjectInfo();\n      console.log(JSON.stringify(projectInfo, null, 2));\n    } catch (error) {\n      handleError(error, \"Failed to fetch project info\");\n    }\n  });\n\nprogram\n  .command(\"delete-account <accountId>\")\n  .description(\"Delete an account by its ID.\")\n  .action(async (accountId) => {\n    try {\n      await client.deleteAccount(accountId);\n      console.log(`Account with ID ${accountId} has been deleted.`);\n    } catch (error) {\n      handleError(error, \"Failed to delete account\");\n    }\n  });\n\nprogram\n  .command(\"delete-accounts-by-app <appId>\")\n  .description(\"Delete all accounts associated with a specific app.\")\n  .action(async (appId) => {\n    try {\n      await client.deleteAccountsByApp(appId);\n      console.log(`All accounts associated with app ID ${appId} have been deleted.`);\n    } catch (error) {\n      handleError(error, \"Failed to delete accounts by app\");\n    }\n  });\n\nprogram\n  .command(\"delete-external-user <externalId>\")\n  .description(\"Delete all accounts associated with a specific external ID.\")\n  .action(async (externalId) => {\n    try {\n      await client.deleteExternalUser(externalId);\n      console.log(`All accounts associated with external ID ${externalId} have been deleted.`);\n    } catch (error) {\n      handleError(error, \"Failed to delete external user\");\n    }\n  });\n\nprogram\n  .command(\"create-connect-token <externalUserId>\")\n  .description(\"Create a new Pipedream Connect token.\")\n  .option(\"--success-redirect-uri <uri>\", \"URL to redirect the user to upon successful connection\")\n  .option(\"--error-redirect-uri <uri>\", \"URL to redirect the user to upon failed connection\")\n  .option(\"--webhook-uri <uri>\", \"Webhook URI that Pipedream can invoke on success or failure of connection requests\")\n  .option(\"--allowed-origins <origins>\", \"Comma-separated list of allowed origins\")\n  .action(async (externalUserId, options) => {\n    try {\n      const tokenResponse = await client.createConnectToken({\n        external_user_id: externalUserId,\n        success_redirect_uri: options.successRedirectUri,\n        error_redirect_uri: options.errorRedirectUri,\n        webhook_uri: options.webhookUri,\n        allowed_origins: options.allowedOrigins\n          ? options.allowedOrigins.split(\",\")\n          : undefined,\n      });\n      console.log(JSON.stringify(tokenResponse, null, 2));\n    } catch (error) {\n      handleError(error, \"Failed to create connect token\");\n    }\n  });\n\nprogram\n  .command(\"get-accounts\")\n  .description(\"Retrieve the list of accounts associated with the project.\")\n  .option(\"--include-credentials <include>\", \"Include credentials in the response\")\n  .action(async (options) => {\n    try {\n      const params = options.includeCredentials\n        ? {\n          include_credentials: options.includeCredentials,\n        }\n        : {};\n      const accounts = await client.getAccounts(params);\n      console.log(JSON.stringify(accounts, null, 2));\n    } catch (error) {\n      handleError(error, \"Failed to fetch accounts\");\n    }\n  });\n\nprogram\n  .command(\"get-account-by-id <accountId>\")\n  .description(\"Retrieve a specific account by ID.\")\n  .action(async (accountId) => {\n    try {\n      const account = await client.getAccountById(accountId);\n      console.log(JSON.stringify(account, null, 2));\n    } catch (error) {\n      handleError(error, \"Failed to fetch account by ID\");\n    }\n  });\n\nprogram\n  .command(\"list-apps\")\n  .description(\"Retrieve the list of apps.\")\n  .option(\"--query <query>\", \"Query string to filter apps\")\n  .action(async (options) => {\n    try {\n      const apps = await client.apps({\n        q: options.query,\n      });\n      console.log(JSON.stringify(apps, null, 2));\n    } catch (error) {\n      handleError(error, \"Failed to fetch apps\");\n    }\n  });\n\nprogram\n  .command(\"get-app <idOrNameSlug>\")\n  .description(\"Retrieve a specific app by ID or name slug.\")\n  .action(async (idOrNameSlug) => {\n    try {\n      const app = await client.app(idOrNameSlug);\n      console.log(JSON.stringify(app, null, 2));\n    } catch (error) {\n      handleError(error, \"Failed to fetch app\");\n    }\n  });\n\nprogram\n  .command(\"list-components\")\n  .description(\"Retrieve the list of components.\")\n  .option(\"--app <app>\", \"Filter components by app\")\n  .option(\"--query <query>\", \"Query string to filter components\")\n  .option(\"--component-type <type>\", \"Filter components by type (trigger or action)\")\n  .action(async (options) => {\n    try {\n      const components = await client.components({\n        app: options.app,\n        q: options.query,\n        componentType: options.componentType,\n      });\n      console.log(JSON.stringify(components, null, 2));\n    } catch (error) {\n      handleError(error, \"Failed to fetch components\");\n    }\n  });\n\nprogram\n  .command(\"get-component <key>\")\n  .description(\"Retrieve a specific component by key.\")\n  .action(async (key) => {\n    try {\n      const component = await client.component({\n        key,\n      });\n      console.log(JSON.stringify(component, null, 2));\n    } catch (error) {\n      handleError(error, \"Failed to fetch component\");\n    }\n  });\n\nprogram\n  .command(\"configure-component\")\n  .description(\"Configure a component.\")\n  .requiredOption(\"--user-id <userId>\", \"User ID\")\n  .requiredOption(\"--component-id <componentId>\", \"Component ID\")\n  .requiredOption(\"--prop-name <propName>\", \"Property name\")\n  .requiredOption(\"--configured-props <props>\", \"Configured properties as JSON string\")\n  .option(\"--dynamic-props-id <id>\", \"Dynamic properties ID\")\n  .action(async (options) => {\n    try {\n      const configuredProps = JSON.parse(options.configuredProps);\n      const response = await client.componentConfigure({\n        userId: options.userId,\n        componentId: options.componentId,\n        propName: options.propName,\n        configuredProps,\n        dynamicPropsId: options.dynamicPropsId,\n      });\n      console.log(JSON.stringify(response, null, 2));\n    } catch (error) {\n      handleError(error, \"Failed to configure component\");\n    }\n  });\n\nprogram\n  .command(\"reload-component-props\")\n  .description(\"Reload component properties.\")\n  .requiredOption(\"--user-id <userId>\", \"User ID\")\n  .requiredOption(\"--component-id <componentId>\", \"Component ID\")\n  .requiredOption(\"--configured-props <props>\", \"Configured properties as JSON string\")\n  .option(\"--dynamic-props-id <id>\", \"Dynamic properties ID\")\n  .action(async (options) => {\n    try {\n      const configuredProps = JSON.parse(options.configuredProps);\n      const response = await client.componentReloadProps({\n        userId: options.userId,\n        componentId: options.componentId,\n        configuredProps,\n        dynamicPropsId: options.dynamicPropsId,\n      });\n      console.log(JSON.stringify(response, null, 2));\n    } catch (error) {\n      handleError(error, \"Failed to reload component properties\");\n    }\n  });\n\nprogram\n  .command(\"run-action\")\n  .description(\"Run an action.\")\n  .requiredOption(\"--user-id <userId>\", \"User ID\")\n  .requiredOption(\"--action-id <actionId>\", \"Action ID\")\n  .requiredOption(\"--configured-props <props>\", \"Configured properties as JSON string\")\n  .option(\"--dynamic-props-id <id>\", \"Dynamic properties ID\")\n  .action(async (options) => {\n    try {\n      const configuredProps = JSON.parse(options.configuredProps);\n      const response = await client.actionRun({\n        userId: options.userId,\n        actionId: options.actionId,\n        configuredProps,\n        dynamicPropsId: options.dynamicPropsId,\n      });\n      console.log(JSON.stringify(response, null, 2));\n    } catch (error) {\n      handleError(error, \"Failed to run action\");\n    }\n  });\n\n// Parse and execute commands\nprogram.parse(process.argv);\n"],"mappings":"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","names":["program","CLIENT_ID","CLIENT_SECRET","PROJECT_ID","API_HOST","ENVIRONMENT","client","createBackendClient","handleError","error","message","projectInfo","accountId","appId","externalId","externalUserId","options","tokenResponse","params","accounts","account","apps","idOrNameSlug","app","components","key","component","configuredProps","response"]}